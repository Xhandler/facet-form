{"version":3,"sources":["globalStyles.js","elements/CodeChallengeHeader.jsx","context/AssetLiabilityContext.jsx","elements/AssetLiabilityTable.jsx","elements/AssetLiabilityForm.jsx","App.jsx","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","CodeChallengeHeader","name","company","className","defaultProps","AssetLiabilityContext","createContext","defaultFormData","entryName","entryAmount","type","loading","table","content","total","AssetLiabilityContextContainer","children","useState","formData","setFormData","Provider","value","handleFormSumbit","event","preventDefault","handleFormChange","target","handleDeleteEntry","console","log","fontawesome","library","add","faTrash","AssetLiabilityTableHeader","headers","map","i","key","AssetLiabilityTableBody","entryAmont","style","height","width","icon","size","AssetLiabilityTable","useContext","deleteEntry","AssetLiabilityForm","label","onSubmit","onChange","min","defaultValue","defaultChecked","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOA6CeA,EAzCKC,YAAkB,I,MCDtC,SAASC,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,UAC1C,OACI,4BAAQA,UAAWA,GACf,kDACyBD,GAEzB,iCACO,2BAAID,KAMvBD,EAAoBI,aAAe,CAC/BH,KAAM,kBACNC,QAAS,gBAGEF,Q,uBCbTK,EAAwBC,wBAAc,CACxCC,gBAPoB,CACpBC,UAAW,GACXC,YAAa,EACbC,KAAM,SAKNC,SAAS,EACTC,MAAO,CACHC,QAAS,GACTC,MAAO,KAIR,SAASC,EAAT,GAAqD,IAAZC,EAAW,EAAXA,SAAW,EACvBC,mBAAS,CACrCT,UAAW,GACXC,YAAa,EACbC,KAAM,UAJ6C,mBAChDQ,EADgD,KACtCC,EADsC,KAuBvD,OACI,kBAACd,EAAsBe,SAAvB,CAAgCC,MAAS,CACjCC,iBAVa,SAAAC,GACrBA,EAAMC,kBAUEC,iBAnBa,SAAAF,GAAU,IAAD,EACRA,EAAMG,OAArBzB,EADuB,EACvBA,KAAMoB,EADiB,EACjBA,MACbF,EAAY,eACLD,EADI,eAENjB,EAAOoB,MAgBJM,kBAPc,SAAAJ,GAAK,MAAI,CAC/BK,QAAQC,IAAIN,KAOJL,aAEHF,GAKEX,Q,wBC7CfyB,IAAYC,QAAQC,IAAIC,KAExB,IAAMC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClC,+BACI,4BACKA,EAAQC,KAAI,SAACnC,EAAMoC,GAAP,OAAa,wBAAIC,IAAG,gBAAWD,IAAMpC,SAIpDsC,EAA0B,SAAC,GAAD,IAAE1B,EAAF,EAAEA,QAAF,OAC5B,+BACKA,EAAQuB,KAAI,WAAiCC,GAAjC,IAAG7B,EAAH,EAAGA,UAAWgC,EAAd,EAAcA,WAAY9B,EAA1B,EAA0BA,KAA1B,OACT,wBAAI4B,IAAG,gBAAWD,IACd,4BACK7B,GAEL,4BACKgC,GAEL,4BACK9B,GAEL,4BACI,4BAAQ+B,MAAO,CAACC,OAAO,OAAQC,MAAM,SACjC,kBAAC,IAAD,CAAiBC,KAAK,QAAQC,KAAK,eA2B5CC,MApBf,YAA6C,IAAd3C,EAAa,EAAbA,UAAa,EACT4C,qBAAW1C,GAE1C,OAHwC,EAChC2C,YADgC,EACnBpC,MAGjB,6BACI,2BAAOT,UAAWA,GACd,kBAAC,EAAD,CAA2BgC,QAAS,CAAC,aAAc,SAAU,OAAQ,YACrE,kBAAC,EAAD,CAAyBtB,QAAS,CAC9B,CACIL,UAAW,WACXgC,WAAY,KACZ9B,KAAM,eC5C9B,SAASuC,EAAT,GAAiD,IAApB9C,EAAmB,EAAnBA,UAAW+C,EAAQ,EAARA,MAAQ,EACWH,qBAAW1C,GAA3Da,EADqC,EACrCA,SAAUO,EAD2B,EAC3BA,iBAAkBH,EADS,EACTA,iBAEnC,OACI,yBAAKnB,UAAWA,GACZ,4BAAI,2BAAI+C,IACR,0BAAOC,SAAU7B,GACb,8CACA,2BACIZ,KAAK,OACLT,KAAK,YACLmD,SAAU3B,EACVJ,MAAOH,EAASV,YAEpB,0CACA,2BACIE,KAAK,SACL2C,IAAI,IACJpD,KAAK,cACLqD,aAAcpC,EAAST,YACvB2C,SAAU3B,IACd,6BACI,2BAAOf,KAAK,QAAQ6C,gBAAc,EAAClC,MAAM,QAAQpB,KAAK,SAD1D,SAEI,2BAAOS,KAAK,QAAQW,MAAM,YAAYpB,KAAK,SAF/C,aAIA,2BAAOS,KAAK,SAASW,MAAM,aAM3C4B,EAAmB7C,aAAe,CAAE8C,MAAO,wBAE5BD,QCjBAO,MAbf,WACE,OACE,yBAAKrD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACY,EAAD,KACM,kBAAC,EAAD,CAAoBmC,MAAM,yBAC1B,kBAAC,EAAD,SCHQO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5b4b07be.chunk.js","sourcesContent":["import {\n    createGlobalStyle\n} from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle('');\n// `\n// *, ::before, ::after {\n//     box-sizing: inherit;\n// }\n// html,\n// body {\n//     margin: 0;\n//     padding: 0;\n//     font-family: Arial, Helvetica, sans-serif;\n//     position:fixed;\n// }\n// tr {\n//     border-top: 1px solid #dddddd;\n//     border-bottom: 1px solid #dddddd;\n// }\n// table {\n//     border-bottom: 2px solid #dddddd;\n// }\n// tr:hover {\n//     background-color: #222222;\n//     color: #eeeeee;\n// }\n\n// input {\n//     border: 5px solid white; \n//     -webkit-box-shadow: \n//       inset 0 0 8px  rgba(0,0,0,0.1),\n//             0 0 16px rgba(0,0,0,0.1); \n//     -moz-box-shadow: \n//       inset 0 0 8px  rgba(0,0,0,0.1),\n//             0 0 16px rgba(0,0,0,0.1); \n//     box-shadow: \n//       inset 0 0 8px  rgba(0,0,0,0.1),\n//             0 0 16px rgba(0,0,0,0.1); \n//     padding: 15px;\n//     background: rgba(255,255,255,0.5);\n//     margin: 0 0 10px 0;\n// }\n// `;\n\nexport default GlobalStyle;","import React from 'react';\nimport styled from 'styled-components';\n\nfunction CodeChallengeHeader({ name, company, className }) {\n    return (\n        <header className={className}>\n            <p>\n                Coding Challege for {company}\n            </p>\n            <p>\n                By <b>{name}</b>\n            </p>\n        </header>\n    );\n};\n\nCodeChallengeHeader.defaultProps = {\n    name: 'Chandler Dibble',\n    company: 'Facet Wealth'\n};\n\nexport default CodeChallengeHeader;\n","import React, { createContext, useState } from 'react';\n\nconst defaultFormData = {\n    entryName: \"\",\n    entryAmount: 0,\n    type: \"ASSET\"\n};\n\nconst AssetLiabilityContext = createContext({\n    defaultFormData,\n    loading: false,\n    table: {\n        content: [],\n        total: 0\n    }\n});\n\nexport function AssetLiabilityContextContainer({children}) {\n    const [formData, setFormData] = useState({\n        entryName: \"\",\n        entryAmount: 0,\n        type: \"ASSET\"\n    });\n\n    const handleFormChange = event => {\n        const {name, value} = event.target;\n        setFormData({\n            ...formData,\n            [name]: value\n        });\n    };\n\n    const handleFormSumbit = event => {\n        event.preventDefault();\n\n    };\n\n    const handleDeleteEntry = event => [\n        console.log(event)\n    ];\n    return (\n        <AssetLiabilityContext.Provider value = {{\n                handleFormSumbit,\n                handleFormChange,\n                handleDeleteEntry,\n                formData\n            }}>\n            {children}\n        </AssetLiabilityContext.Provider>\n    );\n}\n\nexport default AssetLiabilityContext;","import React, { useContext } from 'react';\nimport AssetLiabilityContext from '../context/AssetLiabilityContext';\nimport styled from 'styled-components';\nimport fontawesome from '@fortawesome/fontawesome'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nfontawesome.library.add(faTrash);\n\nconst AssetLiabilityTableHeader = ({ headers }) => (\n<thead>\n    <tr>\n        {headers.map((name, i) => <th key={`al-th-${i}`}>{name}</th>)}\n    </tr>\n</thead>\n);\nconst AssetLiabilityTableBody = ({content}) => (\n    <tbody>\n        {content.map(({ entryName, entryAmont, type}, i) => (\n            <tr key={`al-th-${i}`}>\n                <td>\n                    {entryName}\n                </td>\n                <td>\n                    {entryAmont}\n                </td>\n                <td>\n                    {type}\n                </td>\n                <td>\n                    <button style={{height:\"100%\", width:\"100%\"}}>\n                        <FontAwesomeIcon icon=\"trash\" size=\"lg\"/>\n                    </button>\n                </td>\n            </tr>\n        ))}\n    </tbody>\n)\nfunction AssetLiabilityTable({ className }) {\n    const { deleteEntry, table } = useContext(AssetLiabilityContext);\n\n    return (\n        <div>\n            <table className={className}>\n                <AssetLiabilityTableHeader headers={[\"Entry Name\", \"Amount\", \"Type\", \"Delete\"]} />\n                <AssetLiabilityTableBody content={[\n                    {\n                        entryName: \"Chandler\",\n                        entryAmont: 9123,\n                        type: \"ASSET\"\n                    }\n                ]}/>\n            </table>\n        </div>\n    )\n\n}\n\nexport default AssetLiabilityTable;","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport AssetLiabilityContext from '../context/AssetLiabilityContext';\n\n\nfunction AssetLiabilityForm({className, label}) {\n    const {formData, handleFormChange, handleFormSumbit} = useContext(AssetLiabilityContext);\n\n    return (\n        <div className={className}>\n            <h2><u>{label}</u></h2>\n            <form  onSubmit={handleFormSumbit}>\n                <label>Entry Name:</label>\n                <input \n                    type=\"text\"\n                    name=\"entryName\"\n                    onChange={handleFormChange}\n                    value={formData.entryName}\n                />\n                <label>Amount:</label>\n                <input \n                    type=\"number\"\n                    min=\"0\"\n                    name=\"entryAmount\" \n                    defaultValue={formData.entryAmount}\n                    onChange={handleFormChange} />\n                <div>\n                    <input type=\"radio\" defaultChecked value=\"ASSET\" name=\"type\"/> Asset\n                    <input type=\"radio\" value=\"LIABILITY\" name=\"type\"/> Liablity\n                </div>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        </div>\n    );\n};\n\nAssetLiabilityForm.defaultProps = { label: \"Asset/Liability Form\"};\n\nexport default AssetLiabilityForm;","import React from 'react';\nimport GlobalStyles from './globalStyles';\nimport Container from './elements/Container';\nimport CodeChallengeHeader from './elements/CodeChallengeHeader';\nimport AssetLiabilityTable from './elements/AssetLiabilityTable';\nimport AssetLiabilityForm from './elements/AssetLiabilityForm';\nimport { AssetLiabilityContextContainer } from './context/AssetLiabilityContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyles />\n      <CodeChallengeHeader />\n      <AssetLiabilityContextContainer>\n            <AssetLiabilityForm label=\"Asset/Liability Form\" />\n            <AssetLiabilityTable />\n      </AssetLiabilityContextContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}