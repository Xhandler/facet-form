{"version":3,"sources":["globalStyles.js","elements/CodeChallengeHeader.jsx","context/AssetLiabilityContext.jsx","elements/AssetLiabilityTable.jsx","elements/AssetLiabilityForm.jsx","App.jsx","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","CodeChallengeHeader","name","company","className","defaultProps","styled","API","window","location","host","defaultFormData","entryName","entryAmount","entryType","AssetLiabilityContext","createContext","loading","table","content","total","AssetLiabilityContextContainer","children","useState","formData","setFormData","setLoading","entries","networth","assets","liabilities","tableContent","setTableContent","useEffect","fetch","then","res","json","Provider","value","handleFormSumbit","event","preventDefault","method","headers","body","JSON","stringify","handleFormChange","target","handleDeleteEntry","id","fontawesome","library","add","faTrash","AssetLiabilityTableHeader","map","i","key","AssetLiabilityTableBody","onClick","style","height","width","icon","size","AssetLiabilityTableFooter","useContext","AssetLiabilityForm","label","onSubmit","type","onChange","min","step","defaultValue","defaultChecked","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.989537e5.chunk.js","sourcesContent":["import {\n    createGlobalStyle\n} from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\nhtml {\n    box-sizing: border-box;\n}\nbody {\n    margin: 0;\n}\ntr {\n    border-top: 1px solid #dddddd;\n    border-bottom: 1px solid #dddddd;\n}\ntable {\n    border-bottom: 2px solid #dddddd;\n}\ntr:hover {\n    background-color: #222222;\n    color: #eeeeee;\n}\n\ninput {\n    border: 5px solid white; \n    -webkit-box-shadow: \n      inset 0 0 8px  rgba(0,0,0,0.1),\n            0 0 16px rgba(0,0,0,0.1); \n    -moz-box-shadow: \n      inset 0 0 8px  rgba(0,0,0,0.1),\n            0 0 16px rgba(0,0,0,0.1); \n    box-shadow: \n      inset 0 0 8px  rgba(0,0,0,0.1),\n            0 0 16px rgba(0,0,0,0.1); \n    padding: 15px;\n    background: rgba(255,255,255,0.5);\n    margin: 0 0 10px 0;\n}\n`;\n\nexport default GlobalStyle;","import React from 'react';\nimport styled from 'styled-components';\nfunction CodeChallengeHeader({ name, company, className }) {\n    return (\n        <header className={className}>\n            <p>\n                Coding Challege for {company}\n            </p>\n            <p>\n                By <b>{name}</b>\n            </p>\n        </header>\n    );\n};\n\nCodeChallengeHeader.defaultProps = {\n    name: 'Chandler Dibble',\n    company: 'Facet Wealth'\n};\n\nexport default styled(CodeChallengeHeader)`\nborder-bottom: 1px solid #333;\nbox-shadow: rgba(0, 0, 0, 0.24) 0px 6px 20px;\nwidth: 100%;\ntext-align: center;\n`;\n","import React, { createContext, useState, useEffect } from \"react\";\nconst API = `http://${window.location.host}/api/financial`;\n\nconst defaultFormData = {\n  entryName: \"\",\n  entryAmount: 0,\n  entryType: \"ASSET\"\n};\n\nconst AssetLiabilityContext = createContext({\n  defaultFormData,\n  loading: false,\n  table: {\n    content: [],\n    total: 0\n  }\n});\n\nexport function AssetLiabilityContextContainer({ children }) {\n  const [formData, setFormData] = useState({\n    entryName: \"\",\n    entryAmount: 0,\n    entryType: \"ASSET\"\n  });\n  const [loading, setLoading] = useState(true);\n\n  const [tableContent, setTableContent] = useState({\n    entries: [],\n    total: {\n      networth: 0,\n      assets: 0,\n      liabilities: 0\n    }\n  });\n\n  const handleFormChange = event => {\n    const { name, value } = event.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n\n  const handleFormSumbit = event => {\n    event.preventDefault();\n    setLoading(true);\n    fetch(`${API}/entry`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    }).then(res => {\n      setFormData(defaultFormData);\n      res.json().then(setTableContent)\n      setLoading(false);\n    });\n  };\n\n  const handleDeleteEntry = id => {\n    fetch(`${API}/entry`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ id })\n    }).then(\n      res => res.json().then(setTableContent)\n    );\n  };\n  useEffect(() => {\n    fetch(`${API}/report`).then(\n      res => {\n        res.json().then(setTableContent)\n        setLoading(false);\n      }\n    );\n  }, [])\n  return (\n    <AssetLiabilityContext.Provider\n      value={{\n        loading,\n        formData,\n        tableContent,\n        handleFormSumbit,\n        handleFormChange,\n        handleDeleteEntry\n      }}\n    >\n      {children}\n    </AssetLiabilityContext.Provider>\n  );\n}\n\nexport default AssetLiabilityContext;\n","import React, { useContext } from 'react';\nimport AssetLiabilityContext from '../context/AssetLiabilityContext';\nimport styled from 'styled-components';\nimport fontawesome from '@fortawesome/fontawesome'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nfontawesome.library.add(faTrash);\n\nconst AssetLiabilityTableHeader = ({ headers }) => (\n<thead>\n    <tr>\n        {headers.map((name, i) => <th key={`al-th-${i}`}>{name}</th>)}\n    </tr>\n</thead>\n);\nconst AssetLiabilityTableBody = ({content, handleDeleteEntry}) => (\n    <tbody>\n        {content.map(({ entryName, entryAmount, entryType, id}, i) => (\n            <tr key={`al-th-${i}`}>\n                <td>\n                    {entryName}\n                </td>\n                <td>\n                    ${entryAmount}\n                </td>\n                <td>\n                    {entryType}\n                </td>\n                <td>\n                    <button onClick={() => handleDeleteEntry(id)} style={{height:\"100%\", width:\"100%\"}}>\n                        <FontAwesomeIcon icon=\"trash\" size=\"lg\"/>\n                    </button>\n                </td>\n            </tr>\n        ))}\n    </tbody>\n)\nconst AssetLiabilityTableFooter = ({total}) => (\n    <tfoot>\n        <tr>\n            <td>Assets</td>\n            <td>${total.assets}</td>\n            <td>Liabilities</td>\n            <td>${total.liabilities || '0'}</td>\n            <td>Net</td>\n            <td>${total.networth}</td>\n        </tr>\n    </tfoot>\n)\nfunction AssetLiabilityTable({ className }) {\n    const { handleDeleteEntry, tableContent } = useContext(AssetLiabilityContext);\n\n    const { entries, total } = tableContent;\n\n    return (\n        <div>\n            <table className={className}>\n                <AssetLiabilityTableHeader headers={[\"Entry Name\", \"Amount\", \"Type\", \"Delete\"]} />\n                <AssetLiabilityTableBody content={entries}\n                handleDeleteEntry={handleDeleteEntry}/>\n                <AssetLiabilityTableFooter total={total} />\n            </table>\n        </div>\n    )\n\n}\n\nexport default styled(AssetLiabilityTable)`\nwidth:100%;\n`;","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport AssetLiabilityContext from '../context/AssetLiabilityContext';\n\n\nfunction AssetLiabilityForm({className, label}) {\n    const {formData, handleFormChange, handleFormSumbit} = useContext(AssetLiabilityContext);\n\n    return (\n        <div className={className}>\n            <h2><u>{label}</u></h2>\n            <form  onSubmit={handleFormSumbit}>\n                <span>\n                    <label>Entry Name:</label>\n                    <input \n                        type=\"text\"\n                        name=\"entryName\"\n                        onChange={handleFormChange}\n                        value={formData.entryName}\n                    />\n                </span>\n                <span>\n                    <label>Amount:</label>\n                    <input \n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        name=\"entryAmount\" \n                        defaultValue={formData.entryAmount}\n                        onChange={handleFormChange} />\n                    </span>\n                <div>\n                    <span>\n                        <label>Asset:</label>\n                        <input onChange={handleFormChange} type=\"radio\" defaultChecked value=\"ASSET\" name=\"entryType\"/>\n                    </span>\n                    <span>\n                        <label>Liability:</label>\n                        <input onChange={handleFormChange} type=\"radio\" value=\"LIABILITY\" name=\"entryType\"/> \n                    </span>\n                </div>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        </div>\n    );\n};\n\nAssetLiabilityForm.defaultProps = { label: \"Asset/Liability Form\"};\n\nexport default styled(AssetLiabilityForm)`\ntext-align: center;\nborder: 1px solid #333;\nmargin: 1rem;\nbackground-color: lightgray;\nform {\n    display: flex;\n    flex-direction: column;\n}\nform > span {\n    display: flex;\n    justify-content: space-between;\n    align-content: center;\n}\nform > div {\n    display: flex;\n    justify-content: space-evenly;\n}\n`;","import React from 'react';\nimport GlobalStyles from './globalStyles';\nimport Container from './elements/Container';\nimport CodeChallengeHeader from './elements/CodeChallengeHeader';\nimport AssetLiabilityTable from './elements/AssetLiabilityTable';\nimport AssetLiabilityForm from './elements/AssetLiabilityForm';\nimport { AssetLiabilityContextContainer } from './context/AssetLiabilityContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalStyles />\n      <CodeChallengeHeader />\n      <AssetLiabilityContextContainer>\n            <AssetLiabilityForm label=\"Asset/Liability Form\" />\n            <AssetLiabilityTable />\n      </AssetLiabilityContextContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\n\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}